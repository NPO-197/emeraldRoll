// include standard library for useful constants
.stdlib

.def MplayStart = 0x082e0895
.def m4aSoundMain = 0x082e0125

.begin payload
  .base 0x02028000
  
  .arm
  //b music
  //Copy VidData from Storage sectors into end of first half of EWRAM 
  .def VidDataSize = 0x113b0
  ldr r9,=(0x02020000-VidDataSize)
  mov r4,#5
--mov r1,#0
- ldrb r0,[r10,r1]
  strb r0,[ r9,r1]
  add r1,#1
  cmp r1,r2
  blt -
  add r10,r3
  add r9,r2
  sub r4,#1
  cmp r4,#0
  bgt --

  //Call FLASH bankswap in emerald ROM to swap to FLASH bank 0.   
  mov r0,#0
  ldr r1,=0x082e185d
  mov  lr, pc
  bx r1

  //Copy rest of VidData from saveSlot2 sectors...
  ldr r10,=0x0E000000
  mov r4,#14
  ldr r2,=0x02020000
- ldrb r0,[r10]
  strb r0,[r9]
  add r10,#1
  add r9,#1
  cmp r9,r2
  blt -

  //Decompress VidData in wRAM
  ldr r0,=(0x02020000-VidDataSize)
  ldr r1,=0x02000000
  add ip, pc,#1
  bx ip
  .thumb
  swi 0x11 //Call LZ77UnCompWRAM in BIOS
  .align 4, nop
  bx pc
  nop
  .arm

  //Call FLASH bankswap in emerald ROM to swap to FLASH bank 1.   
  mov r0,#1
  ldr r1,=0x082e185d
  mov  lr, pc
  bx r1

  //Copy musicData from FlashROM into EWRAM
  ldr r10,=0x0E00C000
  ldr r9, =0x02020000
  ldr r2, =0x3060
  mov r1,#0
- ldrb r0,[r10,r1]
  strb r0,[r9,r1]
  add r1,#1
  cmp r1,r2
  blt -

  // Set up r0 to point to the Mplayer in IWRAM
  // Set up r1 to point to the header of our musicData
  // Call MplayStart
  ldr r0, = 0x03007420
  ldr r1, = 0x02023028
  mov r2, r0
  mov r3, #0
  ldr r4, = MplayStart
  mov lr, pc
  bx  r4


  // Wait ~6.5 sec to time the start of the animation with the drumroll
  ldr r6, = 0x04000006
  ldr r8, = 390 //Number of frames to wait before we start the animation
  wait2:
  ldrb r7, [r6]
  cmp r7, #150         // wait for vblank.
  bne wait2
  - ldrb r7,[r6]   
    cmp r7, #150
  beq -             //wait for not vblank
  sub r8,#1
  cmp r8,#0
  bne wait2



  // set REG_DISPCNT
  ldr r0, =REG_DISPCNT
  ldr r1, =0x0400
  strh r1, [r0]

  ldr r0,=REG_BG2CNT
  ldr r1,=0x0004
  strh r1,[r0]

  ldr r0,=REG_BG2VOFS
  ldr r1,=0x0000
  strh r1,[r0]

  // set colors
  ldr r0, =0x05000000
  ldr r1, =palette
  mov r2,#0
- ldrh r3, [r1,r2]
  strh r3, [r0,r2]
  add r2,#2
  cmp r2,#32
  blt -



  //Erase Background2 data
  ldr r10,= 0x06000000
  ldr r2, = 0x00000500
  ldr r0, = 0xffff
  mov r1,#0
- strh r0,[r10,r1]
  add r1,#2
  cmp r1,r2
  blt -


  //Init bgTiles
  ldr r10,=(0x06000000+10)
  mov r2,#0
  mov r3,#40
  mov r4,#0
- strh r2,[r10,r4]
  add r2,#1
  add r4,#2
  cmp r4,r3
  bne -
  add r3,#64
  add r4,#24
  cmp r3,#1344
  blt -

  //Copy frameData from wRAM into VRAM one frame at a time
  ldr r6, = 0x04000006
  startGIF:
  ldr r9,  = flagData
  ldr r11, = 0x02000000

  DrawFrame:
  ldr r10, = 0x06004000
  mov r8, #50
  draw8loop:
  //DrawFrame 8 tiles at a time
  //Only draw a tile if flag data says it needs to be updated
  ldrb r3,[r9]
  mov r7,#8
  --and r0,r3,#0x80
    cmp r0,#0
    beq +
      mov r1,#0
      - ldrh r0,[r11,r1]
        strh r0,[r10,r1]
        add r1,#2
        cmp r1,#32
        blt -
      add r11,#32
  + add r10,#32
    lsl r3,#1
    sub r7,#1
    cmp r7,#0
    bgt --
  add r9,#1
  sub r8,#1
  cmp r8,#0
  bgt draw8loop


  mov r8, #6 //Number of frames to wait before drawing next frame...
  wait1:
  ldrb r7, [r6]
  cmp r7, #150         // wait for vblank.
  bne wait1
  
  

  - ldrb r7,[r6]   
    cmp r7, #150
  beq -             //wait for not vblank
  sub r8,#1
  cmp r8,#0
  bne wait1
  ldr r0,=flagDataEND
  cmp r9,r0
  blt DrawFrame
  //Restart animation
  b startGIF
  .pool

  //Based on 16bitTest.png
  palette:
  .um16 rgb(5,3,1)
  .um16 rgb(8,5,4)
  .um16 rgb(16,8,3)
  .um16 rgb(13,10,9)
  .um16 rgb(19,10,8)
  .um16 rgb(23,13,10)
  .um16 rgb(23,15,14)
  .um16 rgb(20,16,15)
  .um16 rgb(20,17,17)
  .um16 rgb(20,20,23)
  .um16 rgb(27,21,18)
  .um16 rgb(24,22,23)
  .um16 rgb(23,22,25)
  .um16 rgb(23,23,27)
  .um16 rgb(25,25,29)
  .um16 rgb(27,27,31)

  flagData:
  .embed 'Data/FlagData.bin'
  flagDataEND:
.end